% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reef-set_params.R
\name{setRefuge}
\alias{setRefuge}
\title{Set the refuge profile parameters}
\usage{
setRefuge(
  params,
  method,
  w_settle = NULL,
  max_protect = NULL,
  tau = NULL,
  method_params,
  refuge_user = NULL,
  bad_predator = NULL,
  pisc = NULL,
  ...
)
}
\arguments{
\item{params}{MizerParams object}

\item{method}{The desired method for setting up benthic refuge,
can be "simple", "binned", or "data"}

\item{w_settle}{The body weight (g) at which fish settle onto the reef.
Fish smaller than this are considered to be larval and
thus too small to use predation refuge}

\item{max_protect}{The maximum proportion of fish (any size class)
protected by refuge}

\item{tau}{The proportion of fish with access to refuge that actually use it}

\item{method_params}{A data frame containing values specific to each
method for calculating refuge}

\item{refuge_user}{A vector of logical values indicating whether each
functional group uses refuge, TRUE indicates the group uses refuge while
false indicates that they do not. Alternatively,t hese can be included in
the \code{params@species_params} dataframe.}

\item{bad_predator}{A vector of logical values indicating whether hunting is
inhibited by refuge for this functional group. FALSE indicates that this
species is able to encounter prey within refuge (e.g. eels). Alternatively,
these can also be included in the \code{params@species_params} dataframe.}

\item{pisc}{A vector of logical values indicating whether this
functional group are generally piscivores. FALSE indicates that this group
feeds only from the resource spectra. Alternatively,
these can also be included in the \code{params@species_params} dataframe.

Optional parameters:}
}
\value{
\code{setRefuge}: A MizerParams object with updated refuge parameters
}
\description{
Checks if given refuge parameters are valid and then stores them in the
mizerParams object
}
\section{Setting the refuge profile}{


Refuge profiles account for the protective behavior of prey living in
high complexity environments (e.g. coral reefs) with access to predation
refuge. The refuge profile defines the proportion of fish within
user-defined length bins that are protected from being encountered
by a predator.

A unique refuge profile is generated for each predator x prey combination
based on the given refuge profile parameters as well as four values from
\code{params@species_params}: length to weight conversion values \code{a} and \code{b},
\code{refuge_user}, which is true for groups utilize that predation refuge,
and \code{bad_pred}, which is true for predators whose foraging is hindered
by refuge.

The refuge profile is used when calculating the food encounter rate in
\code{\link[=reefEncounter]{reefEncounter()}} and the predation mortality rate in \code{\link[=reefPredMort]{reefPredMort()}}. Its
entries are dimensionless numbers. If no refuge is available then
predator-prey interactions are determined entirely by size-preference.

The mizerReef package provides three methods to define the refuge profile:

\if{html}{\out{<div class="sourceCode">}}\preformatted{ 1. ``simple`` -  This method is preferred for data-poor reefs or reefs
 where the refuge distribution is unknown. It is also ideal for systems
 where only one functional group is expected to be utilizing refuge. The
 proportion of fish with access to refuge \eqn{ R_j(w_p) }$ is given by:

 \deqn{ R_j(w_p) =
         \frac{-ref}{1 + e^{\left(-\alpha (w - W_{max})\right)}} + ref }
     \{R_j(w_p) = -r/(1 + e^\{(-\\alpha (w - W_\{max\}))\} + ref \}

 where \eqn{W_{max}} defines the prey body size at which no crevices in
 the reef are large enough to act as a refuge. Refuge is available to a
 constant proportion \eqn{ref} of fish smaller than \eqn{W_{max}}. The
 slope \eqn{\alpha} describes the sharpness of the cutoff for fish
 larger than \eqn{W_{max}}. The default value for \eqn{\alpha} sets a
 steep slope of \eqn{100}.

 For this method, `method_params` should contain columns named
 `prop_protect` and `max_L` that give the proportion of fish to protect
 and the maximum length protected (cm), respectively.

 2. ``binned`` - This method is appropriate for theoretical applications
 and does not rely on empirical data. It sets refuge to a constant
 proportion of fish within a given size range. The  proportion of fish
 in group \eqn{j} with access to refuge is given by:

 \deqn{ R_j(w_p) = r_k ~~~~~~~ w_p ∈ (~w_{k-1}, w_k~] }
     \{R_j(w_p) = r_k ~~~~~~~ w_p ∈ (~w_\{k-1\}, w_k~]

 where \eqn{r_k} is the proportion of fish with access to refuge in
 size class \eqn{k}.

 For this method, `method_params` should contain columns named
 `start_L`and `end_L` which contain the starting and ending lengths (cm)
 of each size bin and `prop_protect`, the proportion protected within
 each corresponding size bin.

 3. ``data`` -  This method is appropriate when data on the number of
 refuge holes present within defined fish length bins is available. The
 proportion of fish in size class \eqn{k} with access to refuge is given
 by:

 \deqn{R_j(w_p) = \tau\cdot\frac{\eta_k}{\sum_{i}\int_{w_{k-1}}^{w_k}
     N_i(w)~dw}  ~~~~~~~ w_p ∈ (~w_{k-1}, w_k~]}
     \{R_j(w_p) = \\tau \\eta_k/(\\sum_\{i\}\\int_\{w_\{k-1\}\}^\{w_k\}
 N_i(w)~dw)  ~~~~~~~ w_p ∈ (~w_\{k-1\}, w_k~]\}

 where \eqn{\tau} is the proportion of fish with access to refuge that
 are expected to actually utilize  it, \eqn{\eta_k} is the density of
 refuges in size range \eqn{(w_{k-1}, w_k]} and
  \eqn{\sum_{i}\int_{w_{k-1}}^{w_k} N_i(w)~dw} gives the total
 number of fish from any group in size range \eqn{(w_{k-1}, w_k]}.
 This represents the density of competitors for refuges in
 size class \eqn{k}.

 For this method, `method_params` should contain columns named
 `start_L`and `end_L` which contain the starting and ending lengths (cm)
 of each size bin and `refuge_density`, the number of refuges available
 in each size bin.
}\if{html}{\out{</div>}}

This function checks that the supplied refuge parameters are valid, adds
relevant columns to the \code{species_params} dataframe, and stores refuge
parameters in the \code{other_params} slot of the \code{params} object.

Refuge profile parameters can be input in a spreadsheet program and saved
as a .csv file. The data can then be read into R using the command
\code{read.csv()}.
}

\seealso{
Other functions for setting parameters: 
\code{\link{setExtMortParams}()},
\code{\link{setRho}()},
\code{\link{setURParams}()}
}
\concept{functions for setting parameters}
